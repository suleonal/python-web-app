pipeline {
    agent any
    environment {
        APP_NAME = "python-web-app"
        REPOSITORY = "https://github.com/suleonal/python-web-app.git"
	DOCKER_REPO = 'suleonal/python-web-app'
	VERSION = "1.0.${env.BUILD_ID}"
        FULL_CHART_NAME = "${APP_NAME}-${VERSION}.tgz"
	VALUES_FILE = "applications/helm/values.yaml" 
	NAMESPACE = "applications"
    }
    stages {
	stage('Print Working Directory and List Files') {
            steps {
                script {
                    sh 'pwd'
                    
                    sh 'ls -l'
			
		    echo "full chart name: $FULL_CHART_NAME"
                }
            }
        }
	/*stage('Kaniko Build & Push Image') {
            steps {
                container('kaniko') {
                    script {
                        sh '''
			/kaniko/executor --context 'pwd' --dockerfile 'pwd'/Dockerfile  --destination https://index.docker.io/v1/suleonal/python-web-app:1.0.1
                        '''
                    }
                }
            }
        }*/
	stage('Fetch Git Version') {
            steps {
                script {
                    env.GIT_COMMIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    env.APP_VERSION = "1.0.0" 
            	    env.APP_VERSION = "1.0"

                    env.DOCKER_TAGS = "${env.APP_VERSION}.${env.GIT_COMMIT_SHORT}"

                    echo "Application Version: ${env.APP_VERSION}"
                    echo "Major Minor Version: ${env.MAJOR_MINOR_VERSION}"
                    echo "Docker Tags: ${env.DOCKER_TAGS}"
                }
            }
        }
        stage('Kaniko Build & Push Image') {
            steps {
                container('kaniko') {
                    script {
			    def image = "docker.io/${env.DOCKER_REPO}:${env.DOCKER_TAGS}"
			    def context = "applications"
			    def dockerfile = "Dockerfile"
                            sh "/kaniko/executor --context ${context} --dockerfile ${dockerfile} --destination ${image}"
                    }
                }
            }
	}
	stage('Modify Helm Values') {
	    steps {
        	script {
            		def valuesFile = "applications/helm/values.yaml"
            		def newTag = env.DOCKER_TAGS  // Önceki stage'de oluşturulan Docker tag'ı

            		echo "Updating image tag in Helm values file: ${newTag}"

            		sh """
            		   sed -i 's|^  tag:.*|  tag: "${newTag}"|' ${valuesFile}
            		"""
            		sh "cat ${valuesFile} | grep '  tag:'"
        	}
    	    }	
	}
	stage('Modify Chart Version') {
            steps {
                script {
                    sh """#!/bin/bash
                       # Current version
                       cat applications/helm/Chart.yaml | grep version

                       # Update version using sed
                       sed -i 's|version: .*|version: "${VERSION}"|' applications/helm/Chart.yaml

                       # Updated version
                       cat applications/helm/Chart.yaml | grep version
                    """
                }
            }
        }
	stage('Package with Helm') {
            steps {
		container('helm') {
	 	    script{
                    	   sh "helm package applications/helm/."
                    }
            	}
            }
	}
	stage('Helm Push') {
            steps {
                container('helm') {
                    sh "echo \"@${FULL_CHART_NAME}\""
		    sh "cd applications/helm"
		    sh "curl --data-binary \"@${FULL_CHART_NAME}\" -H \"Content-Type: application/x-gzip\" http://helm-repo-chartmuseum.default.svc.cluster.local:8080/api/charts"

                }
            }
        }
    }
}
